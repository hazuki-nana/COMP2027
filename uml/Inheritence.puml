@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getSpeedX():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
    + {abstract} drop() :List<AbstractSupport>
 }


class HeroAircraft {
    - {static}HeroAircraft heroAircraft
    - shootNum:int
    - power:int
    - direction:int
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop() :List<AbstractSupport>
    + increaseHp(int hp):void
    + increaseFire():void
    + Explode():void
    + {static}getHero():HeroAircraft
}
HeroAircraft <|-- HeroAircraft
AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop() :List<AbstractSupport>
}
AbstractAircraft <|-- MobEnemy

class PlusEnemy{
    - shootNum:int
    - power:int
    - direction:int
    + PlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop() :List<AbstractSupport>
}
AbstractAircraft <|-- PlusEnemy

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop() :List<AbstractSupport>
}
AbstractAircraft <|-- EliteEnemy

class BossEnemy{
    - shootNum:int
    - power:int
    - direction:int
    + PlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop() :List<AbstractSupport>
}
AbstractAircraft <|-- BossEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

abstract AbstractSupport {
    + AbstractSupport(int locationX, int locationY, int speedX, int speedY)
    + forward(): void
    + {abstract} Effect(HeroAircraft heroAircraft):void
}

class Bomb {
    +Bomb(int locationX, int locationY, int speedX, int speedY)
    +Effect(HeroAircraft heroAircraft):void
}

class Fire {
    +Fire(int locationX, int locationY, int speedX, int speedY)
    +Effect(HeroAircraft heroAircraft):void
}

class Heal {
    +Heal(int locationX, int locationY, int speedX, int speedY)
    +Effect(HeroAircraft heroAircraft):void
}

AbstractSupport <|-- Bomb
AbstractSupport <|-- Fire
AbstractSupport <|-- Heal
AbstractFlyingObject <|-- AbstractSupport


@enduml