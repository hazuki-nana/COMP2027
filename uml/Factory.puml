@startuml
'https://plantuml.com/sequence-diagram

abstract AbstractSupport {
    + AbstractSupport(int locationX, int locationY, int speedX, int speedY)
    + forward(): void
    + {abstract} Effect(HeroAircraft heroAircraft):void
}

class Bomb {
    +Bomb(int locationX, int locationY, int speedX, int speedY)
    +Effect(HeroAircraft heroAircraft):void
}

class Fire {
    +Fire(int locationX, int locationY, int speedX, int speedY)
    +Effect(HeroAircraft heroAircraft):void
}

class Heal {
    +Heal(int locationX, int locationY, int speedX, int speedY)
    +Effect(HeroAircraft heroAircraft):void
}
AbstractSupport <|-- Bomb
AbstractSupport <|-- Fire
AbstractSupport <|-- Heal

abstract class SupportFactory {
    +{abstract}CreatSupport(int locationX, int locationY, int speedX, int speedY):AbstractSupport;
}
class BombFactory {
    +CreatSupport(int locationX, int locationY, int speedX, int speedY):AbstractSupport;
}
class FireFactory {
    +CreatSupport(int locationX, int locationY, int speedX, int speedY):AbstractSupport;
}

class HealFactory {
    +CreatSupport(int locationX, int locationY, int speedX, int speedY):AbstractSupport;
}
HealFactory ..> Heal
BombFactory ..> Bomb
FireFactory ..> Fire
SupportFactory <|-- BombFactory
SupportFactory <|-- FireFactory
SupportFactory <|-- HealFactory

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop() :List<AbstractSupport>
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- EliteEnemy

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
    + {abstract} drop() :List<AbstractSupport>
 }

abstract class EnemyFactory {
    +{abstract}CreatEnemy():AbstractAircraft;
}
class EliteFactory {
    +CreatEnemy():AbstractAircraft;
}
class MobFactory {
    +CreatEnemy():AbstractAircraft;
}
MobEnemy <.. MobFactory
EliteEnemy <.. EliteFactory
EnemyFactory <|-- EliteFactory
EnemyFactory <|-- MobFactory

class game{}
game ..> AbstractAircraft
game ..> EnemyFactory
game ..> AbstractSupport
EliteEnemy ..> SupportFactory
@enduml